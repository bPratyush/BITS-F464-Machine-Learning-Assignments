# -*- coding: utf-8 -*-
"""ML_Assignment_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DuQ5EvrsGlAK38eDbBgimcvlIlF8E5ur
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
import pickle

df=pd.read_csv('diabetes.csv')

df_orig=pd.read_csv('diabetes.csv')

df.info()

df.head()

## OUTLIER DETECTION AND REMOVAL : NOT ASKED SO NOT DONE !!
# # Calculate Q1 and Q3
# Q1 = df[['Glucose', 'Insulin', 'BMI', 'Age']].quantile(0.25)
# Q3 = df[['Glucose', 'Insulin', 'BMI', 'Age']].quantile(0.75)
# IQR = Q3 - Q1

# # Identify outliers
# outliers = ((df[['Glucose', 'Insulin', 'BMI', 'Age']] < (Q1 - 1.5 * IQR)) |
#             (df[['Glucose', 'Insulin', 'BMI', 'Age']] > (Q3 + 1.5 * IQR)))

# print("Outliers:\n", outliers.sum())

# lower_bound = Q1 - 1.5 * IQR
# upper_bound = Q3 + 1.5 * IQR
# df = df[~((df[['Glucose', 'Insulin', 'BMI', 'Age']] < lower_bound) |
#                   (df[['Glucose', 'Insulin', 'BMI', 'Age']] > upper_bound)).any(axis=1)]

# Standard Scaling due to varied ranges of different attributes in given dataset
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[['Glucose', 'Insulin', 'BMI', 'Age']])
df = pd.DataFrame(scaled_features, columns=['Glucose', 'Insulin', 'BMI', 'Age'])
df.head()

from sklearn.model_selection import train_test_split
df = pd.concat([df, df_orig['Outcome']], axis=1)
X = df[['Glucose', 'Insulin', 'BMI', 'Age']]
y = df['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training set size:", X_train.shape)
print("Testing set size:", X_test.shape)

# Gaussian Naive-Bayes Classifier
naive_bayes_model = GaussianNB()
naive_bayes_model.fit(X_train, y_train)
y_pred_nb = naive_bayes_model.predict(X_test)

# Perceptron Model
perceptron_model = Perceptron(max_iter=1000, tol=1e-3, random_state=42)
perceptron_model.fit(X_train, y_train)
y_pred_perceptron = perceptron_model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

accuracy_nb = accuracy_score(y_test, y_pred_nb)
conf_matrix_nb = confusion_matrix(y_test, y_pred_nb)
class_report_nb = classification_report(y_test, y_pred_nb)

print("Naive Bayes Model Accuracy:", accuracy_nb)
print("Confusion Matrix:\n", conf_matrix_nb)
print("Classification Report:\n", class_report_nb)

accuracy_perceptron = accuracy_score(y_test, y_pred_perceptron)
conf_matrix_perceptron = confusion_matrix(y_test, y_pred_perceptron)
class_report_perceptron = classification_report(y_test, y_pred_perceptron)

print("Perceptron Model Accuracy:", accuracy_perceptron)
print("Confusion Matrix:\n", conf_matrix_perceptron)
print("Classification Report:\n", class_report_perceptron)

#TODO : Highlight Strengths and Weaknesses

with open('naive_bayes_model.pkl', 'wb') as nb_file:
    pickle.dump(naive_bayes_model, nb_file)
with open('perceptron_model.pkl', 'wb') as perc_file:
    pickle.dump(perceptron_model, perc_file)
print("Models saved successfully.")

##LOADING MODELS LATER
# # Load the Naive Bayes model
# with open('naive_bayes_model.pkl', 'rb') as nb_file:
#     loaded_naive_bayes_model = pickle.load(nb_file)

# # Load the Perceptron model
# with open('perceptron_model.pkl', 'rb') as perc_file:
#     loaded_perceptron_model = pickle.load(perc_file)

# print("Models loaded successfully.")

pip install Flask Flask-CORS

